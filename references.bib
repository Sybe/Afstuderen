@inproceedings{eemcs21972,
          eprintid = {21972},
             month = {September},
      official_url = {http://dx.doi.org/10.1007/978-3-642-33365-1_8},
            author = {A. E. {Dalsgaard} and A. W. {Laarman} and K. G. {Larsen} and M. C. {Olesen} and J. C. {van de Pol}},
         num_pages = {16},
            series = {Lecture Notes in Computer Science},
          keywords = {parallel, multi-core, timed automata, well-quasi-ordering, lattice-based model checking, abstraction, symbolic reachability, model checking, lockless, hash table},
        pres_types = {Talk},
       ispublished = {Published},
            editor = {M. {Jurdzinski} and D. {Nickovic}},
           address = {London},
         publisher = {Springer Verlag},
         id_number = {10.1007/978-3-642-33365-1_8},
           isbn_13 = {978-3-642-33365-1},
      howpublished = {http://eprints.eemcs.utwente.nl/21972/},
            volume = {7595},
          location = {London, UK},
        event_type = {Conference},
       event_dates = {18-20 Sep 2012},
   research_groups = {EWI-FMT: Formal Methods and Tools},
         booktitle = {10th International Conference on Formal Modeling and Analysis of Timed Systems, FORMATS 2012, London, UK},
          refereed = {Yes},
  research_programs = {CTIT-DSN: Dependable Systems and Networks},
  research_projects = {CEDICT: 3TU Center of Excellence for ICT},
             title = {Multi-Core Reachability for Timed Automata},
          abstract = {Model checking of timed automata is a widely used technique. But in order to take advantage of modern hardware, the algorithms need to be parallelized. We present a multi-core reachability algorithm for the more general class of well-structured transition systems, and an implementation for timed automata.
Our implementation extends the opaal tool to generate a timed automaton successor generator in c++, that is efficient enough to compete with the UPPAAL model checker, and can be used by the discrete model checker LTSmin, whose parallel reachability algorithms are now extended to handle subsumption of semi-symbolic states. The reuse of efficient lockless data structures guarantees high scalability and efficient memory use.
With experiments we show that opaal+LTSmin can outperform the current state-of-the-art, UPPAAL. The added parallelism is shown to reduce verification times from minutes to mere seconds with speedups of up to 40 on a 48-core machine. Finally, strict BFS and (surprisingly) parallel DFS search order are shown to reduce the state count, and improve speedups.},
     international = {Yes},
              year = {2012},
             pages = {91--106}
}

@inproceedings{eemcs18152,
          eprintid = {18152},
             month = {July},
      official_url = {http://dx.doi.org/10.1007/978-3-642-14295-6_31},
              issn = {0302-9743},
            author = {S. C. C. {Blom} and J. C. {van de Pol} and M. {Weber}},
         num_pages = {6},
            series = {Lecture Notes in Computer Science},
          keywords = {symbolic model checking, distributed model checking, LTSmin},
        pres_types = {Talk},
       ispublished = {Published},
            editor = {T. {Touili} and B. {Cook} and P. {Jackson}},
           address = {Berlin},
         publisher = {Springer Verlag},
         id_number = {10.1007/978-3-642-14295-6_31},
           isbn_13 = {978-3-642-14294-9},
          location = {Edinburgh},
      howpublished = {http://eprints.eemcs.utwente.nl/18152/},
            volume = {6174},
        event_type = {Conference},
       eprint_note = {See also Technical Report TR-CTIT-09-30 (http://eprints.eemcs.utwente.nl/15703/).},
       event_dates = {15-19 Jul 2010},
   research_groups = {EWI-FMT: Formal Methods and Tools},
         booktitle = {Computer Aided Verification, Edinburgh},
          refereed = {Yes},
  research_programs = {CTIT-DSN: Dependable Systems and Networks},
  research_projects = {CEDICT: 3TU Center of Excellence for ICT},
             title = {LTSmin: Distributed and Symbolic Reachability},
          abstract = {The LTSMIN toolset provides a new level of modular design to high-performance model checkers. Its distinguishing feature is the wide spectrum of supported specification languages and model checking paradigms. On the language side, it supports process algebras (MCRL), state based languages (PROMELA, DVE) and even discrete abstractions of ODE models (MAPLE, GNA). On the algorithmic side (Sec. 3.2), it supports two main streams in high-performance model checking: reachability analysis based on BDDs (symbolic) and on a cluster of workstations (distributed, enumerative). LTSMIN also incorporates a distributed implementation of state space minimization, preserving strong or branching bisimulation. 
},
     international = {Yes},
              year = {2010},
             pages = {354--359}
}
